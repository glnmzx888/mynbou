# copy paste from coastSHARK, just to avoid having it as dependency
# for java
# node types from: https://github.com/c2nes/javalang/blob/master/javalang/tree.py
JAVA_NODE_TYPES = [
    'CompilationUnit', 'Import', 'Documented', 'Declaration', 'TypeDeclaration', 'PackageDeclaration', 'ClassDeclaration', 'EnumDeclaration', 'InterfaceDeclaration', 'AnnotationDeclaration',
    'Type', 'BasicType', 'ReferenceType', 'TypeArgument',
    'TypeParameter',
    'Annotation', 'ElementValuePair', 'ElementArrayValue',
    'Member', 'MethodDeclaration', 'FieldDeclaration', 'ConstructorDeclaration',
    'ConstantDeclaration', 'ArrayInitializer', 'VariableDeclaration', 'LocalVariableDeclaration', 'FormalParameter', 'InferredFormalParameter',
    'Statement', 'IfStatement', 'WhileStatement', 'DoStatement', 'ForStatement', 'AssertStatement', 'BreakStatement', 'ContinueStatement', 'ReturnStatement', 'ThrowStatement', 'SynchronizedStatement',
    'TryStatement', 'SwitchStatement', 'BlockStatement', 'StatementExpression',
    'TryResource', 'CatchClause', 'CatchClauseParameter',
    'SwitchStatementCase', 'ForControl', 'EnhancedForControl',
    'Expression', 'Assignment', 'TernaryExpression', 'BinaryOperation', 'Cast', 'MethodReference', 'LambdaExpression',
    'Primary', 'Literal', 'This', 'MemberReference', 'Invocation', 'ExplicitConstructorInvocation', 'SuperConstructorInvocation', 'MethodInvocation', 'SuperMethodInvocation', 'SuperMemberReference', 'ArraySelector', 'ClassReference', 'VoidClassReference', 'VariableDeclarator', 'ClassCreator', 'ArrayCreator', 'InnerClassCreator',
    'EnumBody', 'EnumConstantDeclaration', 'AnnotationMethod',
]

# PMD Rules from Sourcemeter homepage https://www.sourcemeter.com/resources/java/ 2018-07-24
PMD_RULES = [{'type': 'Basic Rules', 'rule': 'Avoid Branching Statement As Last In Loop', 'abbrev': 'PMD_ABSALIL', 'severity': 'Major'}, {'type': 'Basic Rules', 'rule': 'Avoid Decimal Literals In Big Decimal Constructor', 'abbrev': 'PMD_ADLIBDC', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Avoid Multiple Unary Operators', 'abbrev': 'PMD_AMUO', 'severity': 'Major'}, {'type': 'Basic Rules', 'rule': 'Avoid Thread Group', 'abbrev': 'PMD_ATG', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Avoid Using Hard Coded IP', 'abbrev': 'PMD_AUHCIP', 'severity': 'Major'}, {'type': 'Basic Rules', 'rule': 'Avoid Using Octal Values', 'abbrev': 'PMD_AUOV', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Big Integer Instantiation', 'abbrev': 'PMD_BII', 'severity': 'Minor'}, {'type': 'Basic Rules', 'rule': 'Boolean Instantiation', 'abbrev': 'PMD_BI', 'severity': 'Minor'}, {'type': 'Basic Rules', 'rule': 'Broken Null Check', 'abbrev': 'PMD_BNC', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Check Result Set', 'abbrev': 'PMD_CRS', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Check Skip Result', 'abbrev': 'PMD_CSR', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Class Cast Exception With To Array', 'abbrev': 'PMD_CCEWTA', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Collapsible If Statements', 'abbrev': 'PMD_CIS', 'severity': 'Minor'}, {'type': 'Basic Rules', 'rule': 'Dont Call Thread Run', 'abbrev': 'PMD_DCTR', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Dont Use Float Type For Loop Indices', 'abbrev': 'PMD_DUFTFLI', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Double Checked Locking', 'abbrev': 'PMD_DCL', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Empty Catch Block', 'abbrev': 'PMD_ECB', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Empty Finally Block', 'abbrev': 'PMD_EFB', 'severity': 'Minor'}, {'type': 'Basic Rules', 'rule': 'Empty If Stmt', 'abbrev': 'PMD_EIS', 'severity': 'Major'}, {'type': 'Basic Rules', 'rule': 'Empty Statement Block', 'abbrev': 'PMD_EmSB', 'severity': 'Minor'}, {'type': 'Basic Rules', 'rule': 'Empty Statement Not In Loop', 'abbrev': 'PMD_ESNIL', 'severity': 'Minor'}, {'type': 'Basic Rules', 'rule': 'Empty Static Initializer', 'abbrev': 'PMD_ESI', 'severity': 'Minor'}, {'type': 'Basic Rules', 'rule': 'Empty Switch Statements', 'abbrev': 'PMD_ESS', 'severity': 'Major'}, {'type': 'Basic Rules', 'rule': 'Empty Synchronized Block', 'abbrev': 'PMD_ESB', 'severity': 'Major'}, {'type': 'Basic Rules', 'rule': 'Empty Try Block', 'abbrev': 'PMD_ETB', 'severity': 'Major'}, {'type': 'Basic Rules', 'rule': 'Empty While Stmt', 'abbrev': 'PMD_EWS', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Extends Object', 'abbrev': 'PMD_EO', 'severity': 'Minor'}, {'type': 'Basic Rules', 'rule': 'For Loop Should Be While Loop', 'abbrev': 'PMD_FLSBWL', 'severity': 'Minor'}, {'type': 'Basic Rules', 'rule': 'Jumbled Incrementer', 'abbrev': 'PMD_JI', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Misplaced Null Check', 'abbrev': 'PMD_MNC', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Override Both Equals And Hashcode', 'abbrev': 'PMD_OBEAH', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Return From Finally Block', 'abbrev': 'PMD_RFFB', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Unconditional If Statement', 'abbrev': 'PMD_UIS', 'severity': 'Major'}, {'type': 'Basic Rules', 'rule': 'Unnecessary Conversion Temporary', 'abbrev': 'PMD_UCT', 'severity': 'Minor'}, {'type': 'Basic Rules', 'rule': 'Unused Null Check In Equals', 'abbrev': 'PMD_UNCIE', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Useless Operation On Immutable', 'abbrev': 'PMD_UOOI', 'severity': 'Critical'}, {'type': 'Basic Rules', 'rule': 'Useless Overriding Method', 'abbrev': 'PMD_UOM', 'severity': 'Minor'}, {'type': 'Brace Rules', 'rule': 'For Loops Must Use Braces', 'abbrev': 'PMD_FLMUB', 'severity': 'Minor'}, {'type': 'Brace Rules', 'rule': 'If Else Stmts Must Use Braces', 'abbrev': 'PMD_IESMUB', 'severity': 'Minor'}, {'type': 'Brace Rules', 'rule': 'If Stmts Must Use Braces', 'abbrev': 'PMD_ISMUB', 'severity': 'Minor'}, {'type': 'Brace Rules', 'rule': 'While Loops Must Use Braces', 'abbrev': 'PMD_WLMUB', 'severity': 'Minor'}, {'type': 'Clone Implementation Rules', 'rule': 'Clone Throws Clone Not Supported Exception', 'abbrev': 'PMD_CTCNSE', 'severity': 'Major'}, {'type': 'Clone Implementation Rules', 'rule': 'Proper Clone Implementation', 'abbrev': 'PMD_PCI', 'severity': 'Critical'}, {'type': 'Controversial Rules', 'rule': 'Assignment In Operand', 'abbrev': 'PMD_AIO', 'severity': 'Minor'}, {'type': 'Controversial Rules', 'rule': 'Avoid Accessibility Alteration', 'abbrev': 'PMD_AAA', 'severity': 'Major'}, {'type': 'Controversial Rules', 'rule': 'Avoid Prefixing Method Parameters', 'abbrev': 'PMD_APMP', 'severity': 'Minor'}, {'type': 'Controversial Rules', 'rule': 'Avoid Using Native Code', 'abbrev': 'PMD_AUNC', 'severity': 'Major'}, {'type': 'Controversial Rules', 'rule': 'Default Package', 'abbrev': 'PMD_DP', 'severity': 'Minor'}, {'type': 'Controversial Rules', 'rule': 'Do Not Call Garbage Collection Explicitly', 'abbrev': 'PMD_DNCGCE', 'severity': 'Major'}, {'type': 'Controversial Rules', 'rule': 'Dont Import Sun', 'abbrev': 'PMD_DIS', 'severity': 'Major'}, {'type': 'Controversial Rules', 'rule': 'One Declaration Per Line', 'abbrev': 'PMD_ODPL', 'severity': 'Minor'}, {'type': 'Controversial Rules', 'rule': 'Suspicious Octal Escape', 'abbrev': 'PMD_SOE', 'severity': 'Major'}, {'type': 'Controversial Rules', 'rule': 'Unnecessary Constructor', 'abbrev': 'PMD_UC', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Abstract Class Without Abstract Method', 'abbrev': 'PMD_ACWAM', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Abstract Class Without Any Method', 'abbrev': 'PMD_AbCWAM', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Assignment To Non Final Static', 'abbrev': 'PMD_ATNFS', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Avoid Constants Interface', 'abbrev': 'PMD_ACI', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Avoid Instanceof Checks In Catch Clause', 'abbrev': 'PMD_AICICC', 'severity': 'Major'}, {'type': 'Design Rules', 'rule': 'Avoid Protected Field In Final Class', 'abbrev': 'PMD_APFIFC', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Avoid Protected Method In Final Class Not Extending', 'abbrev': 'PMD_APMIFCNE', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Avoid Reassigning Parameters', 'abbrev': 'PMD_ARP', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Avoid Synchronized At Method Level', 'abbrev': 'PMD_ASAML', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Bad Comparison', 'abbrev': 'PMD_BC', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Class With Only Private Constructors Should Be Final', 'abbrev': 'PMD_CWOPCSBF', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Close Resource', 'abbrev': 'PMD_ClR', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Constructor Calls Overridable Method', 'abbrev': 'PMD_CCOM', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Default Label Not Last In Switch Stmt', 'abbrev': 'PMD_DLNLISS', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Empty Method In Abstract Class Should Be Abstract', 'abbrev': 'PMD_EMIACSBA', 'severity': 'Major'}, {'type': 'Design Rules', 'rule': 'Equals Null', 'abbrev': 'PMD_EN', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Field Declarations Should Be At Start Of Class', 'abbrev': 'PMD_FDSBASOC', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Final Field Could Be Static', 'abbrev': 'PMD_FFCBS', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Idempotent Operations', 'abbrev': 'PMD_IO', 'severity': 'Major'}, {'type': 'Design Rules', 'rule': 'Immutable Field', 'abbrev': 'PMD_IF', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Instantiation To Get Class', 'abbrev': 'PMD_ITGC', 'severity': 'Major'}, {'type': 'Design Rules', 'rule': 'Logic Inversion', 'abbrev': 'PMD_LI', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Missing Break In Switch', 'abbrev': 'PMD_MBIS', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Missing Static Method In Non Instantiatable Class', 'abbrev': 'PMD_MSMINIC', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Non Case Label In Switch Statement', 'abbrev': 'PMD_NCLISS', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Non Static Initializer', 'abbrev': 'PMD_NSI', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Non Thread Safe Singleton', 'abbrev': 'PMD_NTSS', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Optimizable To Array Call', 'abbrev': 'PMD_OTAC', 'severity': 'Major'}, {'type': 'Design Rules', 'rule': 'Position Literals First In Case Insensitive Comparisons', 'abbrev': 'PMD_PLFICIC', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Position Literals First In Comparisons', 'abbrev': 'PMD_PLFIC', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Preserve Stack Trace', 'abbrev': 'PMD_PST', 'severity': 'Major'}, {'type': 'Design Rules', 'rule': 'Return Empty Array Rather Than Null', 'abbrev': 'PMD_REARTN', 'severity': 'Major'}, {'type': 'Design Rules', 'rule': 'Simple Date Format Needs Locale', 'abbrev': 'PMD_SDFNL', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Simplify Boolean Expressions', 'abbrev': 'PMD_SBE', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Simplify Boolean Returns', 'abbrev': 'PMD_SBR', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Simplify Conditional', 'abbrev': 'PMD_SC', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Singular Field', 'abbrev': 'PMD_SF', 'severity': 'Major'}, {'type': 'Design Rules', 'rule': 'Switch Stmts Should Have Default', 'abbrev': 'PMD_SSSHD', 'severity': 'Major'}, {'type': 'Design Rules', 'rule': 'Too Few Branches For ASwitch Statement', 'abbrev': 'PMD_TFBFASS', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Uncommented Empty Constructor', 'abbrev': 'PMD_UEC', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Uncommented Empty Method', 'abbrev': 'PMD_UEM', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Unnecessary Local Before Return', 'abbrev': 'PMD_ULBR', 'severity': 'Minor'}, {'type': 'Design Rules', 'rule': 'Unsynchronized Static Date Formatter', 'abbrev': 'PMD_USDF', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Use Collection Is Empty', 'abbrev': 'PMD_UCIE', 'severity': 'Major'}, {'type': 'Design Rules', 'rule': 'Use Locale With Case Conversions', 'abbrev': 'PMD_ULWCC', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Use Notify All Instead Of Notify', 'abbrev': 'PMD_UNAION', 'severity': 'Critical'}, {'type': 'Design Rules', 'rule': 'Use Varargs', 'abbrev': 'PMD_UV', 'severity': 'Minor'}, {'type': 'Finalizer Rules', 'rule': 'Avoid Calling Finalize', 'abbrev': 'PMD_ACF', 'severity': 'Major'}, {'type': 'Finalizer Rules', 'rule': 'Empty Finalizer', 'abbrev': 'PMD_EF', 'severity': 'Minor'}, {'type': 'Finalizer Rules', 'rule': 'Finalize Does Not Call Super Finalize', 'abbrev': 'PMD_FDNCSF', 'severity': 'Critical'}, {'type': 'Finalizer Rules', 'rule': 'Finalize Only Calls Super Finalize', 'abbrev': 'PMD_FOCSF', 'severity': 'Minor'}, {'type': 'Finalizer Rules', 'rule': 'Finalize Overloaded', 'abbrev': 'PMD_FO', 'severity': 'Critical'}, {'type': 'Finalizer Rules', 'rule': 'Finalize Should Be Protected', 'abbrev': 'PMD_FSBP', 'severity': 'Critical'}, {'type': 'Import Statement Rules', 'rule': 'Dont Import Java Lang', 'abbrev': 'PMD_DIJL', 'severity': 'Minor'}, {'type': 'Import Statement Rules', 'rule': 'Duplicate Imports', 'abbrev': 'PMD_DI', 'severity': 'Minor'}, {'type': 'Import Statement Rules', 'rule': 'Import From Same Package', 'abbrev': 'PMD_IFSP', 'severity': 'Minor'}, {'type': 'Import Statement Rules', 'rule': 'Too Many Static Imports', 'abbrev': 'PMD_TMSI', 'severity': 'Major'}, {'type': 'Import Statement Rules', 'rule': 'Unnecessary Fully Qualified Name', 'abbrev': 'PMD_UFQN', 'severity': 'Minor'}, {'type': 'J2EE Rules', 'rule': 'Do Not Call System Exit', 'abbrev': 'PMD_DNCSE', 'severity': 'Critical'}, {'type': 'J2EE Rules', 'rule': 'Local Home Naming Convention', 'abbrev': 'PMD_LHNC', 'severity': 'Major'}, {'type': 'J2EE Rules', 'rule': 'Local Interface Session Naming Convention', 'abbrev': 'PMD_LISNC', 'severity': 'Major'}, {'type': 'J2EE Rules', 'rule': 'MDBAnd Session Bean Naming Convention', 'abbrev': 'PMD_MDBASBNC', 'severity': 'Major'}, {'type': 'J2EE Rules', 'rule': 'Remote Interface Naming Convention', 'abbrev': 'PMD_RINC', 'severity': 'Major'}, {'type': 'J2EE Rules', 'rule': 'Remote Session Interface Naming Convention', 'abbrev': 'PMD_RSINC', 'severity': 'Major'}, {'type': 'J2EE Rules', 'rule': 'Static EJBField Should Be Final', 'abbrev': 'PMD_SEJBFSBF', 'severity': 'Critical'}, {'type': 'JUnit Rules', 'rule': 'JUnit Assertions Should Include Message', 'abbrev': 'PMD_JUASIM', 'severity': 'Minor'}, {'type': 'JUnit Rules', 'rule': 'JUnit Spelling', 'abbrev': 'PMD_JUS', 'severity': 'Critical'}, {'type': 'JUnit Rules', 'rule': 'JUnit Static Suite', 'abbrev': 'PMD_JUSS', 'severity': 'Critical'}, {'type': 'JUnit Rules', 'rule': 'JUnit Test Contains Too Many Asserts', 'abbrev': 'PMD_JUTCTMA', 'severity': 'Minor'}, {'type': 'JUnit Rules', 'rule': 'JUnit Tests Should Include Assert', 'abbrev': 'PMD_JUTSIA', 'severity': 'Major'}, {'type': 'JUnit Rules', 'rule': 'Simplify Boolean Assertion', 'abbrev': 'PMD_SBA', 'severity': 'Minor'}, {'type': 'JUnit Rules', 'rule': 'Test Class Without Test Cases', 'abbrev': 'PMD_TCWTC', 'severity': 'Minor'}, {'type': 'JUnit Rules', 'rule': 'Unnecessary Boolean Assertion', 'abbrev': 'PMD_UBA', 'severity': 'Minor'}, {'type': 'JUnit Rules', 'rule': 'Use Assert Equals Instead Of Assert True', 'abbrev': 'PMD_UAEIOAT', 'severity': 'Major'}, {'type': 'JUnit Rules', 'rule': 'Use Assert Null Instead Of Assert True', 'abbrev': 'PMD_UANIOAT', 'severity': 'Minor'}, {'type': 'JUnit Rules', 'rule': 'Use Assert Same Instead Of Assert True', 'abbrev': 'PMD_UASIOAT', 'severity': 'Minor'}, {'type': 'JUnit Rules', 'rule': 'Use Assert True Instead Of Assert Equals', 'abbrev': 'PMD_UATIOAE', 'severity': 'Minor'}, {'type': 'Jakarta Commons Logging Rules', 'rule': 'Guard Debug Logging', 'abbrev': 'PMD_GDL', 'severity': 'Major'}, {'type': 'Jakarta Commons Logging Rules', 'rule': 'Guard Log Statement', 'abbrev': 'PMD_GLS', 'severity': 'Minor'}, {'type': 'Jakarta Commons Logging Rules', 'rule': 'Proper Logger', 'abbrev': 'PMD_PL', 'severity': 'Minor'}, {'type': 'Jakarta Commons Logging Rules', 'rule': 'Use Correct Exception Logging', 'abbrev': 'PMD_UCEL', 'severity': 'Major'}, {'type': 'Java Logging Rules', 'rule': 'Avoid Print Stack Trace', 'abbrev': 'PMD_APST', 'severity': 'Major'}, {'type': 'Java Logging Rules', 'rule': 'Guard Log Statement Java Util', 'abbrev': 'PMD_GLSJU', 'severity': 'Minor'}, {'type': 'Java Logging Rules', 'rule': 'Logger Is Not Static Final', 'abbrev': 'PMD_LINSF', 'severity': 'Minor'}, {'type': 'Java Logging Rules', 'rule': 'More Than One Logger', 'abbrev': 'PMD_MTOL', 'severity': 'Major'}, {'type': 'Java Logging Rules', 'rule': 'System Println', 'abbrev': 'PMD_SP', 'severity': 'Major'}, {'type': 'JavaBean Rules', 'rule': 'Missing Serial Version UID', 'abbrev': 'PMD_MSVUID', 'severity': 'Major'}, {'type': 'Naming Rules', 'rule': 'Avoid Dollar Signs', 'abbrev': 'PMD_ADS', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Avoid Field Name Matching Method Name', 'abbrev': 'PMD_AFNMMN', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Avoid Field Name Matching Type Name', 'abbrev': 'PMD_AFNMTN', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Boolean Get Method Name', 'abbrev': 'PMD_BGMN', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Class Naming Conventions', 'abbrev': 'PMD_CNC', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Generics Naming', 'abbrev': 'PMD_GN', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Method Naming Conventions', 'abbrev': 'PMD_MeNC', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Method With Same Name As Enclosing Class', 'abbrev': 'PMD_MWSNAEC', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'No Package', 'abbrev': 'PMD_NP', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Package Case', 'abbrev': 'PMD_PC', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Short Class Name', 'abbrev': 'PMD_SCN', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Short Method Name', 'abbrev': 'PMD_SMN', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Suspicious Constant Field Name', 'abbrev': 'PMD_SCFN', 'severity': 'Minor'}, {'type': 'Naming Rules', 'rule': 'Suspicious Equals Method Name', 'abbrev': 'PMD_SEMN', 'severity': 'Critical'}, {'type': 'Naming Rules', 'rule': 'Suspicious Hashcode Method Name', 'abbrev': 'PMD_SHMN', 'severity': 'Critical'}, {'type': 'Naming Rules', 'rule': 'Variable Naming Conventions', 'abbrev': 'PMD_VNC', 'severity': 'Minor'}, {'type': 'Optimization Rules', 'rule': 'Add Empty String', 'abbrev': 'PMD_AES', 'severity': 'Minor'}, {'type': 'Optimization Rules', 'rule': 'Avoid Array Loops', 'abbrev': 'PMD_AAL', 'severity': 'Major'}, {'type': 'Optimization Rules', 'rule': 'Redundant Field Initializer', 'abbrev': 'PMD_RFI', 'severity': 'Minor'}, {'type': 'Optimization Rules', 'rule': 'Unnecessary Wrapper Object Creation', 'abbrev': 'PMD_UWOC', 'severity': 'Major'}, {'type': 'Optimization Rules', 'rule': 'Use Array List Instead Of Vector', 'abbrev': 'PMD_UALIOV', 'severity': 'Minor'}, {'type': 'Optimization Rules', 'rule': 'Use Arrays As List', 'abbrev': 'PMD_UAAL', 'severity': 'Major'}, {'type': 'Optimization Rules', 'rule': 'Use String Buffer For String Appends', 'abbrev': 'PMD_USBFSA', 'severity': 'Major'}, {'type': 'Security Code Guideline Rules', 'rule': 'Array Is Stored Directly', 'abbrev': 'PMD_AISD', 'severity': 'Major'}, {'type': 'Security Code Guideline Rules', 'rule': 'Method Returns Internal Array', 'abbrev': 'PMD_MRIA', 'severity': 'Major'}, {'type': 'Strict Exception Rules', 'rule': 'Avoid Catching Generic Exception', 'abbrev': 'PMD_ACGE', 'severity': 'Major'}, {'type': 'Strict Exception Rules', 'rule': 'Avoid Catching NPE', 'abbrev': 'PMD_ACNPE', 'severity': 'Critical'}, {'type': 'Strict Exception Rules', 'rule': 'Avoid Catching Throwable', 'abbrev': 'PMD_ACT', 'severity': 'Major'}, {'type': 'Strict Exception Rules', 'rule': 'Avoid Losing Exception Information', 'abbrev': 'PMD_ALEI', 'severity': 'Major'}, {'type': 'Strict Exception Rules', 'rule': 'Avoid Rethrowing Exception', 'abbrev': 'PMD_ARE', 'severity': 'Minor'}, {'type': 'Strict Exception Rules', 'rule': 'Avoid Throwing New Instance Of Same Exception', 'abbrev': 'PMD_ATNIOSE', 'severity': 'Minor'}, {'type': 'Strict Exception Rules', 'rule': 'Avoid Throwing Null Pointer Exception', 'abbrev': 'PMD_ATNPE', 'severity': 'Critical'}, {'type': 'Strict Exception Rules', 'rule': 'Avoid Throwing Raw Exception Types', 'abbrev': 'PMD_ATRET', 'severity': 'Major'}, {'type': 'Strict Exception Rules', 'rule': 'Do Not Extend Java Lang Error', 'abbrev': 'PMD_DNEJLE', 'severity': 'Critical'}, {'type': 'Strict Exception Rules', 'rule': 'Do Not Throw Exception In Finally', 'abbrev': 'PMD_DNTEIF', 'severity': 'Critical'}, {'type': 'Strict Exception Rules', 'rule': 'Exception As Flow Control', 'abbrev': 'PMD_EAFC', 'severity': 'Major'}, {'type': 'String and StringBuffer Rules', 'rule': 'Avoid Duplicate Literals', 'abbrev': 'PMD_ADL', 'severity': 'Major'}, {'type': 'String and StringBuffer Rules', 'rule': 'Avoid String Buffer Field', 'abbrev': 'PMD_ASBF', 'severity': 'Minor'}, {'type': 'String and StringBuffer Rules', 'rule': 'Consecutive Appends Should Reuse', 'abbrev': 'PMD_CASR', 'severity': 'Minor'}, {'type': 'String and StringBuffer Rules', 'rule': 'Consecutive Literal Appends', 'abbrev': 'PMD_CLA', 'severity': 'Minor'}, {'type': 'String and StringBuffer Rules', 'rule': 'Inefficient String Buffering', 'abbrev': 'PMD_ISB', 'severity': 'Minor'}, {'type': 'String and StringBuffer Rules', 'rule': 'String Buffer Instantiation With Char', 'abbrev': 'PMD_SBIWC', 'severity': 'Critical'}, {'type': 'String and StringBuffer Rules', 'rule': 'String Instantiation', 'abbrev': 'PMD_StI', 'severity': 'Minor'}, {'type': 'String and StringBuffer Rules', 'rule': 'String To String', 'abbrev': 'PMD_STS', 'severity': 'Minor'}, {'type': 'String and StringBuffer Rules', 'rule': 'Unnecessary Case Change', 'abbrev': 'PMD_UCC', 'severity': 'Minor'}, {'type': 'String and StringBuffer Rules', 'rule': 'Use Equals To Compare Strings', 'abbrev': 'PMD_UETCS', 'severity': 'Critical'}, {'type': 'Type Resolution Rules', 'rule': 'Clone Method Must Implement Cloneable', 'abbrev': 'PMD_ClMMIC', 'severity': 'Major'}, {'type': 'Type Resolution Rules', 'rule': 'Loose Coupling', 'abbrev': 'PMD_LoC', 'severity': 'Major'}, {'type': 'Type Resolution Rules', 'rule': 'Signature Declare Throws Exception', 'abbrev': 'PMD_SiDTE', 'severity': 'Major'}, {'type': 'Type Resolution Rules', 'rule': 'Unused Imports', 'abbrev': 'PMD_UnI', 'severity': 'Minor'}, {'type': 'Unnecessary and Unused Code Rules', 'rule': 'Unused Local Variable', 'abbrev': 'PMD_ULV', 'severity': 'Major'}, {'type': 'Unnecessary and Unused Code Rules', 'rule': 'Unused Private Field', 'abbrev': 'PMD_UPF', 'severity': 'Major'}, {'type': 'Unnecessary and Unused Code Rules', 'rule': 'Unused Private Method', 'abbrev': 'PMD_UPM', 'severity': 'Major'}]
PMD_SEVERITIES = list(set([d['severity'] for d in PMD_RULES]))
PMD_RULE_TYPES = list(set([d['type'] for d in PMD_RULES]))
PMD_RMATCH = {d['abbrev']: d['severity'] for d in PMD_RULES}
PMD_RTMATCH = {d['abbrev']: d['type'] for d in PMD_RULES}

# Static Source Code Metrics from Sourcemeter homepage https://www.sourcemeter.com/resources/java/ 2018-07-24
SM_METRICS = ['SM_annotation_lcom5', 'SM_class_lcom5', 'SM_enum_lcom5', 'SM_interface_lcom5', 'SM_method_hcpl', 'SM_method_hdif', 'SM_method_heff', 'SM_method_hndb', 'SM_method_hpl', 'SM_method_hpv', 'SM_method_htrp', 'SM_method_hvol', 'SM_method_mims', 'SM_method_mi', 'SM_method_misei', 'SM_method_mism', 'SM_file_mccc', 'SM_method_mccc', 'SM_annotation_nl', 'SM_class_nl', 'SM_enum_nl', 'SM_interface_nl', 'SM_method_nl', 'SM_annotation_nle', 'SM_class_nle', 'SM_enum_nle', 'SM_interface_nle', 'SM_method_nle', 'SM_annotation_wmc', 'SM_class_wmc', 'SM_enum_wmc', 'SM_interface_wmc', 'SM_annotation_cbo', 'SM_class_cbo', 'SM_enum_cbo', 'SM_interface_cbo', 'SM_annotation_cboi', 'SM_class_cboi', 'SM_enum_cboi', 'SM_interface_cboi', 'SM_annotation_nii', 'SM_class_nii', 'SM_enum_nii', 'SM_interface_nii', 'SM_method_nii', 'SM_annotation_noi', 'SM_class_noi', 'SM_enum_noi', 'SM_interface_noi', 'SM_method_noi', 'SM_annotation_rfc', 'SM_class_rfc', 'SM_enum_rfc', 'SM_interface_rfc', 'SM_annotation_ad', 'SM_class_ad', 'SM_enum_ad', 'SM_interface_ad', 'SM_package_ad', 'SM_annotation_cd', 'SM_class_cd', 'SM_enum_cd', 'SM_interface_cd', 'SM_method_cd', 'SM_package_cd', 'SM_annotation_cloc', 'SM_class_cloc', 'SM_enum_cloc', 'SM_file_cloc', 'SM_interface_cloc', 'SM_method_cloc', 'SM_package_cloc', 'SM_annotation_dloc', 'SM_class_dloc', 'SM_enum_dloc', 'SM_interface_dloc', 'SM_method_dloc', 'SM_annotation_pda', 'SM_class_pda', 'SM_enum_pda', 'SM_file_pda', 'SM_interface_pda', 'SM_package_pda', 'SM_annotation_pua', 'SM_class_pua', 'SM_enum_pua', 'SM_file_pua', 'SM_interface_pua', 'SM_package_pua', 'SM_component_tad', 'SM_package_tad', 'SM_annotation_tcd', 'SM_class_tcd', 'SM_component_tcd', 'SM_enum_tcd', 'SM_interface_tcd', 'SM_method_tcd', 'SM_package_tcd', 'SM_annotation_tcloc', 'SM_class_tcloc', 'SM_component_tcloc', 'SM_enum_tcloc', 'SM_interface_tcloc', 'SM_method_tcloc', 'SM_package_tcloc', 'SM_component_tpda', 'SM_package_tpda', 'SM_component_tpua', 'SM_package_tpua', 'SM_annotation_dit', 'SM_class_dit', 'SM_enum_dit', 'SM_interface_dit', 'SM_annotation_noa', 'SM_class_noa', 'SM_enum_noa', 'SM_interface_noa', 'SM_annotation_noc', 'SM_class_noc', 'SM_enum_noc', 'SM_interface_noc', 'SM_annotation_nod', 'SM_class_nod', 'SM_enum_nod', 'SM_interface_nod', 'SM_annotation_nop', 'SM_class_nop', 'SM_enum_nop', 'SM_interface_nop', 'SM_annotation_loc', 'SM_class_loc', 'SM_enum_loc', 'SM_file_loc', 'SM_interface_loc', 'SM_method_loc', 'SM_package_loc', 'SM_annotation_lloc', 'SM_class_lloc', 'SM_enum_lloc', 'SM_file_lloc', 'SM_interface_lloc', 'SM_method_lloc', 'SM_package_lloc', 'SM_annotation_na', 'SM_class_na', 'SM_enum_na', 'SM_interface_na', 'SM_package_na', 'SM_package_ncl', 'SM_package_nen', 'SM_annotation_ng', 'SM_class_ng', 'SM_enum_ng', 'SM_interface_ng', 'SM_package_ng', 'SM_package_nin', 'SM_annotation_nla', 'SM_class_nla', 'SM_enum_nla', 'SM_interface_nla', 'SM_annotation_nlg', 'SM_class_nlg', 'SM_enum_nlg', 'SM_interface_nlg', 'SM_annotation_nlm', 'SM_class_nlm', 'SM_enum_nlm', 'SM_interface_nlm', 'SM_annotation_nlpa', 'SM_class_nlpa', 'SM_enum_nlpa', 'SM_interface_nlpa', 'SM_annotation_nlpm', 'SM_class_nlpm', 'SM_enum_nlpm', 'SM_interface_nlpm', 'SM_annotation_nls', 'SM_class_nls', 'SM_enum_nls', 'SM_interface_nls', 'SM_annotation_nm', 'SM_class_nm', 'SM_enum_nm', 'SM_interface_nm', 'SM_package_nm', 'SM_package_npkg', 'SM_method_numpar', 'SM_annotation_npa', 'SM_class_npa', 'SM_enum_npa', 'SM_interface_npa', 'SM_package_npa', 'SM_annotation_npm', 'SM_class_npm', 'SM_enum_npm', 'SM_interface_npm', 'SM_package_npm', 'SM_annotation_ns', 'SM_class_ns', 'SM_enum_ns', 'SM_interface_ns', 'SM_package_ns', 'SM_annotation_nos', 'SM_class_nos', 'SM_enum_nos', 'SM_interface_nos', 'SM_method_nos', 'SM_annotation_tloc', 'SM_class_tloc', 'SM_component_tloc', 'SM_enum_tloc', 'SM_interface_tloc', 'SM_method_tloc', 'SM_package_tloc', 'SM_annotation_tlloc', 'SM_class_tlloc', 'SM_component_tlloc', 'SM_enum_tlloc', 'SM_interface_tlloc', 'SM_method_tlloc', 'SM_package_tlloc', 'SM_annotation_tna', 'SM_class_tna', 'SM_component_tna', 'SM_enum_tna', 'SM_interface_tna', 'SM_package_tna', 'SM_component_tncl', 'SM_package_tncl', 'SM_component_tndi', 'SM_package_tndi', 'SM_component_tnen', 'SM_package_tnen', 'SM_component_tnfi', 'SM_package_tnfi', 'SM_annotation_tng', 'SM_class_tng', 'SM_component_tng', 'SM_enum_tng', 'SM_interface_tng', 'SM_package_tng', 'SM_component_tnin', 'SM_package_tnin', 'SM_annotation_tnla', 'SM_class_tnla', 'SM_enum_tnla', 'SM_interface_tnla', 'SM_annotation_tnlg', 'SM_class_tnlg', 'SM_enum_tnlg', 'SM_interface_tnlg', 'SM_annotation_tnlm', 'SM_class_tnlm', 'SM_enum_tnlm', 'SM_interface_tnlm', 'SM_annotation_tnlpa', 'SM_class_tnlpa', 'SM_enum_tnlpa', 'SM_interface_tnlpa', 'SM_annotation_tnlpm', 'SM_class_tnlpm', 'SM_enum_tnlpm', 'SM_interface_tnlpm', 'SM_annotation_tnls', 'SM_class_tnls', 'SM_enum_tnls', 'SM_interface_tnls', 'SM_annotation_tnm', 'SM_class_tnm', 'SM_component_tnm', 'SM_enum_tnm', 'SM_interface_tnm', 'SM_package_tnm', 'SM_component_tnpkg', 'SM_package_tnpkg', 'SM_annotation_tnpa', 'SM_class_tnpa', 'SM_component_tnpa', 'SM_enum_tnpa', 'SM_interface_tnpa', 'SM_package_tnpa', 'SM_component_tnpcl', 'SM_package_tnpcl', 'SM_component_tnpen', 'SM_package_tnpen', 'SM_component_tnpin', 'SM_package_tnpin', 'SM_annotation_tnpm', 'SM_class_tnpm', 'SM_component_tnpm', 'SM_enum_tnpm', 'SM_interface_tnpm', 'SM_package_tnpm', 'SM_annotation_tns', 'SM_class_tns', 'SM_component_tns', 'SM_enum_tns', 'SM_interface_tns', 'SM_package_tns', 'SM_annotation_tnos', 'SM_class_tnos', 'SM_component_tnos', 'SM_enum_tnos', 'SM_interface_tnos', 'SM_method_tnos', 'SM_package_tnos']
CLONE_METRICS = ['SM_annotation_cc', 'SM_annotation_ccl', 'SM_annotation_cco', 'SM_annotation_ci', 'SM_annotation_clc', 'SM_annotation_cllc', 'SM_annotation_ldc', 'SM_annotation_lldc', 'SM_interface_cco', 'SM_method_ccl', 'SM_method_cco', 'SM_class_ccl', 'SM_enum_cco', 'SM_package_cco', 'SM_interface_ccl', 'SM_enum_ccl', 'SM_package_ccl', 'SM_component_ccl', 'SM_method_cc', 'SM_class_cc', 'SM_class_cco', 'SM_interface_cc', 'SM_enum_cc', 'SM_package_cc', 'SM_component_cc', 'SM_component_cee', 'SM_component_ceg', 'SM_method_ci', 'SM_class_ci', 'SM_interface_ci', 'SM_enum_ci', 'SM_package_ci', 'SM_component_ci', 'SM_method_clc', 'SM_class_clc', 'SM_interface_clc', 'SM_enum_clc', 'SM_package_clc', 'SM_component_clc', 'SM_method_cllc', 'SM_class_cllc', 'SM_interface_cllc', 'SM_enum_cllc', 'SM_package_cllc', 'SM_component_cllc', 'SM_component_cr', 'SM_method_ldc', 'SM_class_ldc', 'SM_interface_ldc', 'SM_enum_ldc', 'SM_package_ldc', 'SM_component_ldc', 'SM_method_lldc', 'SM_class_lldc', 'SM_interface_lldc', 'SM_enum_lldc', 'SM_package_lldc', 'SM_component_lldc', 'SM_component_ncr']

CLONE_INSTANCE_METRICS = ['SM_cloneinstance_CA', 'SM_cloneclass_CA']  # to be continued

# source: fabian
CHANGE_TYPES = ['computation', 'data', 'interface', 'logic/control', 'other']

# ticket severities:
# t = Issue.objects.distinct('priority')
# print(set([i.lower().strip() for i in t]))
TICKET_SEVERITIES = ['regression', 'normal', 'minor', 'critical', 'major', 'blocker', 'trivial', 'enhancement']

# ticket tyes;
# t = Issue.objects.distinct('issue_types')
# print(set([i.lower().strip() for i in t]))
TICKET_TYPE_MAPPING = {'bug': 'bug',
                       'new feature': 'improvement',
                       'new jira project': 'other',
                       'epic': 'other',
                       'umbrella': 'other',
                       'it help': 'other',
                       'proposal': 'improvement',
                       'new tlp': 'other',
                       'improvement': 'improvement',
                       'technical task': 'task',
                       'sub-task': 'task',
                       'task': 'task',
                       'new git repo': 'other',
                       'wish': 'improvment',
                       'brainstorming': 'other',
                       'planned work': 'improvement',
                       'project': 'other',
                       'test': 'test',
                       'temp': 'other',
                       'request': 'improvement',
                       'story': 'other',
                       'documentation': 'documentation',
                       'question': 'other',
                       'dependency upgrade': 'other'}

# refactoring types
# Refactoring.objects.all().distinct('type')
REFACTORING_TYPES = ['rename_method',
                     'move_method',
                     'inline_method',
                     'extract_method',
                     'move_class',
                     'rename_class',
                     'move_attribute',
                     'extract_superclass',
                     'move_and_rename_class',
                     'pull_up_method',
                     'push_down_method',
                     'pull_up_attribute',
                     'push_down_attribute']

IGNORE_PACKAGE_METRICS = ['Android Rules']

HASSAN_KEYS = [
    'HASSAN_ldhcm',
    'HASSAN_lgdhcm',
    'HASSAN_edhcm',
    'HASSAN_hcm',
    'HASSAN_whcm'
]

MOSER_KEYS = [
    'MOSER_authors',
    'MOSER_revisions',
    'MOSER_sum_lines_added',
    'MOSER_max_lines_added',
    'MOSER_avg_lines_added',
    'MOSER_sum_lines_deleted',
    'MOSER_max_lines_deleted',
    'MOSER_avg_lines_deleted',
    'MOSER_sum_code_churn',
    'MOSER_max_code_churn',
    'MOSER_avg_code_churn',
    'MOSER_max_changeset',
    'MOSER_avg_changeset',
    'MOSER_refactorings',
    'MOSER_bugfix',
    'MOSER_age',
    'MOSER_weighted_age'
]
